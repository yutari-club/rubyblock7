{
	"builder.Builder.face|param|direction": "方向転換(ほうこうてんかん)後のビルダーの向き",
	"builder.Builder.fill": "現在の位置と以前印を付けた位置の間の空間を埋(う)めます。",
	"builder.Builder.fill|param|block": "領域を埋(う)めるのに使用するブロックの種類",
	"builder.Builder.popState": "ビルダーの状態を最後に状態スタックにプッシュしたときの状態に戻(もど)します。",
	"builder.Builder.raiseWall": "最後に印を付けた位置からのビルダーの移動経路に沿って、指定されたブロックの種類と高さの壁(かべ)を立てます。",
	"builder.Builder.raiseWall|param|block": "壁(かべ)に使用するブロックの種類",
	"builder.Builder.raiseWall|param|height": "ブロック数での壁(かべ)の高さ。たとえば：5",
	"builder.Builder.startStructure": "構造物の建築を開始する。この後ブロックを使って置いたり、範囲(はんい)を埋(う)めたり、線を引いたりすると構造物の範囲(はんい)として自動的に認識(にんしき)される。「構造物として保存する」を使ってメモリに保存し、「構造物を読(よ)み込(こ)む」を使ってすぐに再建築することができる。",
	"builder.Builder.tracePath": "最後に印を付けた位置から指定された種類のブロックを使って軌跡(きせき)をなぞります。",
	"builder.Builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用するブロックの種類",
	"builder.face|param|direction": "方向転換(ほうこうてんかん)後のビルダーの向き",
	"builder.fill": "現在の位置と以前印を付けた位置の間の空間を埋(う)めます。",
	"builder.fill|param|block": "領域を埋(う)めるのに使用するブロックの種類",
	"builder.popState": "ビルダーの状態を最後に状態スタックにプッシュしたときの状態に戻(もど)します。",
	"builder.raiseWall": "最後に印を付けた位置からのビルダーの移動経路に沿って、指定されたブロックの種類と高さの壁(かべ)を立てます。",
	"builder.raiseWall|param|block": "壁(かべ)に使用するブロックの種類",
	"builder.raiseWall|param|height": "ブロック数での壁(かべ)の高さ。たとえば：5",
	"builder.startStructure": "構造物の建築を開始する。この後ブロックを使って置いたり、範囲(はんい)を埋(う)めたり、線を引いたりすると構造物の範囲(はんい)として自動的に認識(にんしき)される。「構造物として保存する」を使ってメモリに保存し、「構造物を読(よ)み込(こ)む」を使ってすぐに再建築することができる。",
	"builder.tracePath": "最後に印を付けた位置から指定された種類のブロックを使って軌跡(きせき)をなぞります。",
	"builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用するブロックの種類",
	"Array": "リスト内のアイテムの追加、削除(さくじょ)、および置(お)き換(か)えを行います。",
	"Array._popStatement": "配列から最後の要素を削除(さくじょ)し、その値を返します。",
	"Array._removeAtStatement": "特定の位置にある要素を削除(さくじょ)します。",
	"Array._shiftStatement": "配列から最初の要素を削除(さくじょ)し、その値を返します。このメソッドは、配列の長さを変更(へんこう)します。",
	"Array.concat|param|arr": "連結される他(ほか)の配列",
	"Array.fill": "配列の指定の範囲(はんい)のすべての要素を一定の値にする。終了(しゅうりょう)インデックスは範囲(はんい)に含(ふく)まない。",
	"Array.indexOf|param|fromIndex": "検索(けんさく)を開始する配列の場所。fromIndex を省略した場合、検索(けんさく)は位置 0 から始まります。",
	"Array.indexOf|param|item": "配列内で検索(けんさく)する値。",
	"Array.insertAt": "指定された位置に値を挿入(そうにゅう)し、長さを 1 つ増やします",
	"Array.insertAt|param|index": "値を挿入(そうにゅう)するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
	"Array.isArray": "指定されたオブジェクトが配列か確認(かくにん)する。",
	"Array.length": "配列の長さを取得または設定します。この数値は配(くばり)列の最後の要素の位置よりも 1 つ大きな値になります。",
	"Array.map": "配列の各要素に対して定義されたコールバック関数を呼び出し、結果を含(ふく)む配列を返します。",
	"Array.pop": "配列から最後の要素を削除(さくじょ)し、その値を返します。",
	"Array.reduce": "配列のすべての要素に対して指定されたコールバック関数を呼び出します。コールバック関数の戻(もど)り値(ち)は累積(るいせき)した結果となり、次回コールバック関数が呼び出された際の引数として提供されます。",
	"Array.reduce|param|initialValue": "累積(るいせき)を開始する初期値。callbackfn 関数の初回呼び出し時にはこの値を配列の値ではなく、引数として提供します。",
	"Array.removeAt": "特定の位置にある要素を削除(さくじょ)し、その要素を返します",
	"Array.removeElement": "オブジェクト内で最初に出現したものを削除(さくじょ)します。削除(さくじょ)された場合は true を返します。",
	"Array.reverse": "配列に含(ふく)まれる要素を逆の順番にします。最初の配列要素は最後の要素となり、最後の配列要素は最初の要素となります。",
	"Array.set|param|value": "挿入(そうにゅう)する値。たとえば：0",
	"Array.shift": "配列から最初の要素を削除(さくじょ)し、その値を返します。このメソッドは、配列の長さを変更(へんこう)します。",
	"Array.slice|param|end": "配列の指定部分の終了(しゅうりょう)位置。たとえば：0",
	"Array.some": "指定された関数で実装されているテストに、配列の中の少なくとも 1 つの要素が合格するかどうかを確認(かくにん)する。",
	"Array.sort": "配列の要素を並(なら)び替(か)えた後、配列を返します。並び順は必ずしも安定しているとは限りません。",
	"Array.splice": "配列から要素を削除(さくじょ)します。",
	"Array.splice|param|deleteCount": "削除(さくじょ)する要素の数。たとえば：0",
	"Array.splice|param|start": "要素の削除(さくじょ)を開始する配列内の 0 から始まる位置。たとえば：0",
	"Array@type": "リスト内のアイテムの追加、削除(さくじょ)、および置(お)き換(か)えを行います。",
	"ColoredBlock": "色を変更(へんこう)できるブロック",
	"FillOperation": "既存(きそん)のブロックに対する塗(ぬ)りつぶしオプション。既存(きそん)のブロックの維持(いじ)、入(い)れ替(か)え、破壊(はかい)を制御(せいぎょ)します。",
	"FillOperation.Destroy": "指定した領域内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)え、（未変更(へんこう)のものを含(ふく)む）既存(きそん)のブロックとブロックの中身をあたかもエンチャントされていないダイヤのシャベルやツルハシを使って採掘(さいくつ)されたエンティティであるかのようにドロップします。（つたのようにはさみを使ってのみ採掘(さいくつ)されるブロックはドロップしません。液体も同じです。）",
	"FillOperation.Hollow": "指定した領域の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"FillOperation.Keep": "指定した領域の空気ブロックのみを指定ブロックで置(お)き換(か)えます。",
	"FillOperation.Outline": "指定した領域の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"FillOperation.Replace": "指定した領域内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
	"Math.abs": "数値の絶対値を返します（絶対値とはゼロとの距離(きょり)です）。たとえば、-5の絶対値は、5の絶対値と同じく「5」です。",
	"Math.constrain": "数値を範囲(はんい)内に制限します",
	"Math.constrain|param|high": "データ範囲(はんい)の上限値（すべてのデータ型）",
	"Math.constrain|param|low": "データ範囲(はんい)の下限値（すべてのデータ型）",
	"Math.idiv": "2 つの数値の商を符号(ふごう)付 32 ビット整数値で返します。",
	"Math.imul": "2 つの数値の積を符号(ふごう)付 32 ビット整数値で返します。",
	"Math.map": "数値を、ある範囲(はんい)から別の範囲(はんい)にマップします。つまり、数値が``元の下限``なら``結果の下限``に変換(へんかん)され、``元の上限``なら``結果の上限``に変換(へんかん)され、間の値なら間の値に変換(へんかん)されます。",
	"Math.map|param|value": "変換(へんかん)する、元の値。",
	"Math.pow": "底を指定の指数で累乗(るいじょう)した値を返します。",
	"Math.random": "0と1の間の擬似(ぎじ)乱数を返します。",
	"Math.randomRange": "min と max の間に含(ふく)まれる疑似(ぎじ)乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
	"Math.randomRange|param|max": "境界を含(ふく)めた上限。たとえば：10",
	"Math.randomRange|param|min": "境界を含(ふく)めた下限。たとえば：0",
	"Math.roundWithPrecision": "``x``を、指定された``桁数(けたすう)``の数字に丸めます",
	"Math.roundWithPrecision|param|digits": "結果の桁数(けたすう)",
	"Math.sign": "x が正、負、または 0 のどれであるかを示す符号(ふごう)を返します。",
	"Number.isNaN": "指定された値が数値型のNaNかどうか確認(かくにん)する。",
	"Position.getValue|param|direction": "座標の値を返す軸(じく)",
	"Position.toWorld": "この位置を世界での位置に変換(へんかん)して、世界での位置を新たに作成します。",
	"ShapeOperation": "図形を埋(う)める演算子",
	"ShapeOperation.Hollow": "指定した領域の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"ShapeOperation.Outline": "指定した領域の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定した領域の内側にブロックが存在しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"ShapeOperation.Replace": "指定した領域内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
	"String": "テキスト文字列の結合、分割(ぶんかつ)、検索(けんさく)を行います。",
	"String.compare": "2 つの文字列の文字の順序にどのような違(ちが)いがあるかを確認(かくにん)してください (ASCII エンコーディングで)。",
	"String.compare|param|that": "ターゲット文字列と比較(ひかく)する文字列",
	"String.concat|param|other": "文字列の末尾(まつび)に追加する文字列。",
	"String.fromCharCode": "指定された文字コードから、その文字コードに相当する文字1文字だけを含(ふく)む文字列を作ります。",
	"String.includes": "文字列に指定した文字列の文字が含(ふく)まれているかどうかを判断します。",
	"String.includes|param|searchValue": "検索(けんさく)するテキスト",
	"String.includes|param|start": "検索(けんさく)の開始インデックス (オプション)",
	"String.indexOf|param|searchValue": "検索(けんさく)するテキスト",
	"String.indexOf|param|start": "検索(けんさく)の開始インデックス (オプション)",
	"String.replace": "指定された文字列に最初に一致(いっち)したところを、別の指定された文字列に置(お)き換(か)えたものを返す。",
	"String.replaceAll": "指定された文字列に一致(いっち)したところすべてを、別の指定された文字列に置(お)き換(か)えたものを返す。",
	"String.replaceAll|param|replacer": "現在の文字列で部分文字列を置(お)き換(か)える先の文字列、または部分文字列を受け取り置(お)き換(か)える先の文字列を返す関数。",
	"String.replaceAll|param|toReplace": "現在の文字列で置(お)き換(か)えられる部分文字列",
	"String.replace|param|replacer": "現在の文字列で部分文字列を置(お)き換(か)える先の文字列、または部分文字列を受け取り置(お)き換(か)える先の文字列を返す関数。",
	"String.replace|param|toReplace": "現在の文字列で置(お)き換(か)えられる部分文字列",
	"String.slice|param|start": "最初の文字の位置。負の値を指定すると、末尾(まつび)から数えることができます。たとえば：0",
	"String.split": "区切り文字で文字列を分割(ぶんかつ)する",
	"String.substr|param|length": "抽出(ちゅうしゅつ)する文字数",
	"String.substr|param|start": "最初の文字の位置。負の値を指定すると、末尾(まつび)から数えることができます。たとえば：0",
	"String.toLowerCase": "文字列を小文字に変換(へんかん)する。",
	"String.toUpperCase": "文字列を大文字に変換(へんかん)する。",
	"String.trim": "現在の文字列の両端(りょうたん)から空白を削除(さくじょ)した部分文字列を返します",
	"String@type": "テキスト文字列の結合、分割(ぶんかつ)、検索(けんさく)を行います。",
	"TargetSelector.outsideRadius": "このセレクターの基本座標からの最小距離(きょり)を設定します。",
	"TargetSelector.outsideRadius|param|radius": "このターゲットセレクターからの最小距離(きょり)（ブロック単位）。たとえば：10",
	"TargetSelector.toString": "このターゲットセレクターのゲームの表記を含(ふく)む文字列を返します。",
	"TargetSelector.withinRadius": "このセレクターの基本座標からの最大距離(きょり)を設定します。",
	"TargetSelector.withinRadius|param|radius": "このターゲットセレクターからの最大距離(きょり)（ブロック単位）。たとえば：5",
	"TestForBlocksMask.All": "元の領域と移動先の領域内のすべてのブロックは、正確に一致(いっち)する必要があります。",
	"TestForBlocksMask.Masked": "元の領域内の空気ブロックは、移動先の領域内の任意のブロックに一致(いっち)します。",
	"TravelMethod.Fall": "飛行しない時は宙に浮(う)きます（上か下に転びます）",
	"TravelMethod.SwimLava": "溶岩(ようがん)の中で泳ぐ",
	"TravelMethod.Walk": "普通(ふつう)に歩く（地上での既定(きてい)値）",
	"_py.range|param|first": "シーケンスを終える値。この値はシーケンスに含(ふく)まれない。",
	"_py.range|param|step": "範囲(はんい)内の各ステップで増減する値。0以外の整数でなければならない。",
	"_py.range|param|stop": "シーケンスを終える値。この値はシーケンスに含(ふく)まれない。",
	"agent": "あなたの目標達成を支援(しえん)する Minecraft のアシスタント。",
	"agent.attack": "エージェントに指定された方向に攻撃(こうげき)を命令するコマンドです。",
	"agent.attack|param|direction": "攻撃(こうげき)する方向。たとえば：SixDirection.Forward",
	"agent.collectAll": "エージェントに、近くに存在する全(すべ)てのブロックやアイテムを回収させるためのコマンドです。",
	"agent.destroy": "エージェントに、指定した方向に存在するブロックを破壊(はかい)させるためのコマンドです。",
	"agent.destroy|param|direction": "エージェントが壊(こわ)すブロックの方向。たとえば：SixDirection.Forward",
	"agent.detect": "エージェントが隣接(りんせつ)している指定した方向のマスに、ブロックが存在するかどうかを検知する。",
	"agent.detect|param|direction": "検出を実施(じっし)する方向。たとえば：SixDirection.Forward",
	"agent.drop|param|slot": "アイテムを削除(さくじょ)する 1 から 27 のスロット番号を指定します。たとえば：1",
	"agent.setItem|param|blockOrItem": "与(あた)えるブロックまたはアイテム",
	"blocks": "世界でブロックを追加、調査、変更(へんこう)するためのすべて。",
	"blocks.cloneFiltered": "領域内のブロックが特定の種類のブロックと一致(いっち)する場合にのみ、立方体領域を別の場所に複製します。",
	"blocks.comparator|param|mode": "コンパレーターの比較(ひかく)モード",
	"blocks.fill": "2 つの地点の間の空間を埋(う)めます。",
	"blocks.fill|param|block": "空間を埋(う)めるのに使用するブロック",
	"blocks.fill|param|operator": "範囲(はんい)内の既(すで)に置かれていたブロックの処理",
	"blocks.kindsOfBlocksInRange": "このAPIは廃止(はいし)される予定です。",
	"blocks.onBlockBroken": "特定の種類のブロックが採掘(さいくつ)されるか、破壊(はかい)されたときにコードを実行します。",
	"blocks.onBlockBroken|param|block": "破壊(はかい)されたときにこのコードを実行するブロックの種類",
	"blocks.positionsOfBlocksInRange": "このAPIは廃止(はいし)される予定です。",
	"blocks.repeater|param|delay": "ゲームのティックで表したリピーターの遅延(ちえん)時間",
	"blocks.replace": "指定された領域内の特定の種類のすべてのブロックを、新しい種類のブロックに入(い)れ替(か)えます。",
	"blocks.replace|param|newblock": "既存(きそん)のブロックと入(い)れ替(か)える新しいブロックの種類",
	"blocks.replace|param|oldblock": "新しいブロックの種類と入(い)れ替(か)えるブロックの種類",
	"blocks.testForBlocks": "2 つの領域内のブロックが一致(いっち)するかどうかを調査します。",
	"gameplay": "ゲームのモード、天気、時間を制御(せいぎょ)し、ルールを変更(へんこう)するためのコマンド。",
	"gameplay.immutableWorld": "ワールドか編集可能かどうかを変更(へんこう)する。",
	"gameplay.setDifficulty": "ゲームの難易度を変更(へんこう)します。",
	"gameplay.setGameMode": "選択(せんたく)したプレイヤーのゲームモードを変更(へんこう)します。",
	"gameplay.setGameMode|param|player": "ゲームモードを変更(へんこう)するプレイヤーを決定するセレクター",
	"gameplay.setGameRule|param|rule": "変更(へんこう)するゲームのルール。たとえば：GameRule.PvP",
	"gameplay.setWeather": "現在の天気を変更(へんこう)します。",
	"gameplay.time": "既定(きてい)の時刻を表します。",
	"gameplay.timeSet": "現在の時刻を、ゲームのティック数を指定して既定(きてい)の時刻か指定の時刻に設定します。",
	"gameplay.time|param|time": "既定(きてい)の時刻。たとえば：DateTime.Day",
	"gameplay.title": "選択(せんたく)したターゲットのタイトルとサブタイトルを表示します",
	"gameplay.title|param|target": "選択(せんたく)するプレイヤーとエンティティ",
	"gameplay.xp": "選択(せんたく)したプレイヤーに経験値を追加します。",
	"loops.forever": "コードを、ずっとバックグラウンドでくり返します。くり返しの1回ごとに、ほかのコードを実行する時間を与(あた)えます。",
	"mobs.applyEffect": "指定された対象に特殊(とくしゅ)効果を適用します",
	"mobs.applyEffect|param|amplifier": "特殊(とくしゅ)効果の強さ",
	"mobs.applyEffect|param|effect": "適用する特殊(とくしゅ)効果",
	"mobs.applyEffect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与(ふよ)されるかを決定するターゲットセレクター",
	"mobs.effect": "指定された対象に特殊(とくしゅ)効果を適用します",
	"mobs.effect|param|amplifier": "特殊(とくしゅ)効果の強さ",
	"mobs.effect|param|duration": "特殊(とくしゅ)効果の長さ",
	"mobs.effect|param|effect": "適用する特殊(とくしゅ)効果",
	"mobs.effect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与(ふよ)されるかを決定するターゲットセレクター",
	"mobs.entitiesByType": "特定の種類のモブ（動物やモンスター）をすべて選択(せんたく)します。",
	"mobs.entitiesByType|param|type": "選択(せんたく)するモブの種類",
	"mobs.execute": "他(ほか)のターゲットとしてコマンドを実行します。",
	"mobs.executeDetect|param|command": "指定されたブロックが正常に検出された場合に選択(せんたく)したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
	"mobs.execute|param|command": "選択(せんたく)したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
	"mobs.give": "ゲームからブロックやアイテムを指定されたプレイヤーに渡(わた)します。",
	"mobs.give|param|amount": "与(あた)える数量。たとえば：1",
	"mobs.give|param|block": "与(あた)えるブロックまたはアイテム",
	"mobs.kill": "選択(せんたく)されたエンティティを行動不能にする",
	"mobs.near": "指定した位置近くのターゲットを選択(せんたく)します",
	"mobs.near|param|pos": "ターゲットを選択(せんたく)する場所付近の位置",
	"mobs.near|param|radius": "指定されたターゲット選択(せんたく)位置からの距離(きょり)（ブロック単位）。たとえば：5",
	"mobs.near|param|target": "選択(せんたく)されるエンティティの種類",
	"mobs.parseSelector": "指定の文字列を TargetSelector オブジェクトに解析(かいせき)します。この関数は正しい型の引数が与(あた)えられたかどうかや、引数の名前が有効であるかどうかを確認(かくにん)するためのチェックは行いません。\n\n@returns 解析(かいせき)された TargetSelector オブジェクトまたは null（文字列が無効だった場合）",
	"mobs.parseSelector|param|str": "文字列を解析(かいせき)するターゲットセレクター",
	"mobs.playerByName": "指定された名前を持つプレイヤーを選択(せんたく)します。",
	"mobs.playerByName|param|name": "選択(せんたく)するプレイヤーの名前。たとえば：名前",
	"mobs.playersInGameMode": "指定されたゲームモードのプレイヤーをすべて選択(せんたく)します。",
	"mobs.playersInGameMode|param|mode": "すべてのプレイヤーを選択(せんたく)するゲームモード",
	"mobs.spawn": "指定した場所に生き物を召喚(しょうかん)します。",
	"mobs.spawn|param|destination": "生き物を召喚(しょうかん)する位置の座標",
	"mobs.spawn|param|mob": "召喚(しょうかん)する生き物の種類",
	"mobs.target": "プレイヤーまたはモブのセットを選択(せんたく)します。",
	"mobs.target|param|kind": "選択(せんたく)されるエンティティの種類",
	"mobs.teleportToPosition|param|destination": "選択(せんたく)したエンティティのテレポート先の座標",
	"parseFloat": "文字列を数値に変換(へんかん)します。",
	"parseInt": "文字列を整数に変換(へんかん)します。",
	"parseInt|param|radix": "テキスト内の数値の基数を指定する 2 ~ 36 の範囲(はんい)の値です。",
	"parseInt|param|text": "整数に変換(へんかん)する文字列。例: \"123\"",
	"player": "コマンドの実行、情報交換(こうかん)、ゲーム内で発生するイベントへの応答を行います。",
	"player.onCameraUsed": "カメラで写真を撮影(さつえい)した時に、コードを実行します。",
	"player.runChatCommandWithArguments|param|arg": "チャット コマンドで利用したいすべての引数を含(ふく)む文字列",
	"player.warningMessage": "チャットで(橙色(だいだいいろ)の文字で)警告を表示する。",
	"positions.equals": "2つの位置が同等かどうかを比較(ひかく)します。",
	"positions.equals|param|p1": "比較(ひかく)する最初の位置",
	"positions.equals|param|p2": "比較(ひかく)する 2 番目(つがいめ)の位置",
	"positions.random": "指定された立方体領域内でランダムに位置を選択(せんたく)します。",
	"positions.toCompassDirection": "方位の度数を最も近い四方位に変換(へんかん)する。",
	"positions.toCompassDirection|param|deg": "四方位に変換(へんかん)される方位の度数",
	"randint": "min と max の間に含(ふく)まれる疑似(ぎじ)乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
	"randint|param|max": "境界を含(ふく)めた上限。たとえば：10",
	"randint|param|min": "境界を含(ふく)めた下限。たとえば：0",
	"randpos": "指定された立方体領域内でランダムに位置を選択(せんたく)します。",
	"randpos|param|p1": "立方体領域の最初の角の位置",
	"randpos|param|p2": "立方体領域の対角線上にある角の位置",
	"world": "新しい世界での位置を作成します（東西、上下、南北）。",
	"world|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
	"world|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"world|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
	"ExplorationTimeQuery": "時間を取得する際の時間の種類",
	"exploration.isDaylightTimeAsync": "現在の時刻を、ゲームのティック数で取得します。",
	"exploration.isDaylightTimeAsync|param|query": "取得する時刻の種類",
	"exploration.setDifficulty|param|difficulty": "新しい難易度",
	"exploration.setExplorationRule|param|enabled": "指定されたルールを有効にするかどうか",
	"exploration.setWeather": "現在の天気を変更します。",
	"exploration.time": "既定の時刻を表します。",
	"exploration.timeAdd": "現在の時刻にティック（このゲームでの時間の単位）を追加します。",
	"exploration.timeAdd|param|amount": "現在の時刻に追加するティックの数。たとえば：100",
	"exploration.timeQuery|param|query": "取得する時刻の種類",
	"exploration.timeSet|param|time": "目的の時刻。たとえば：DayTime.Day",
	"exploration.time|param|time": "既定の時刻。たとえば：DateTime.Day",
	"exploration.title": "選択したターゲットのタイトルとサブタイトルを表示します",
	"exploration.title|param|subTitle": "表示するサブタイトル",
	"exploration.title|param|title": "表示する大きなタイトル",
	"exploration.toggleDownfall": "雨が降っていなかったら雨を降らし、雨が降っていたら雨を止めます。",
	"exploration.xp|param|amount": "追加する経験値のポイント。たとえば：10",
	"mobs.boost": "指定されたターゲットに特定のエンチャントを適用します。",
	"mobs.onMobEliminated|param|mob": "生き物の種類",
	"mobs.targetUser|param|kind": "選択されるエンティティの種類",
	"mobs.teleportToUser|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
	"user.execute|param|command": "実行するスラッシュコマンド（先頭に``/``を入れる必要はありません）。たとえば：「say Hi!」",
	"user.message": "最後のメッセージがある場合は取得します。",
	"user.onChat|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"user.onTellCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"user.onTravelled|param|method": "移動方法",
	"user.runChatCommand": "コード内でチャットコマンドを実行します。",
	"user.runChatCommandWithArguments": "コード内でチャットコマンドを引数付きで実行します。",
	"user.runChatCommandWithArguments|param|arg": "チャット コマンドで利用したいすべての引数を含む文字列",
	"user.runChatCommandWithArguments|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"user.runChatCommand|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"user.teleport|param|to": "目的の位置",
	"user.tell": "ターゲットにメッセージをささやきます。",
	"user.tell|param|message": "ささやく文字列。たとえば：「Hi!」",
	"user.tell|param|target": "エンティティのセレクター",
	"shapes": "線、球およびその他の幾何学図形を作ります。",
	"shapes.circle": "中心点を中心にブロックで円を作ります。",
	"shapes.circle|param|radius": "円の半径。たとえば：5",
	"shapes.line": "ある位置から別の位置までブロックの線を作ります。",
	"shapes.sphere": "中心点を中心にブロックで球を作ります。",
	"shapes.sphere|param|radius": "球の半径。たとえば：5"
}